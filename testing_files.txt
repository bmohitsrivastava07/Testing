//dependencies:


<dependencies>
    <!-- JUnit 5 -->
    <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter-api</artifactId>
        <version>5.8.1</version>
        <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter-engine</artifactId>
        <version>5.8.1</version>
        <scope>test</scope>
    </dependency>

    <!-- Mockito -->
    <dependency>
        <groupId>org.mockito</groupId>
        <artifactId>mockito-core</artifactId>
        <version>3.12.4</version>
        <scope>test</scope>
    </dependency>
</dependencies>

________________________________________________________________

ReviewServiceTest.java
package com.ArtGalleryManagement.Backend.Service;

import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import com.ArtGalleryManagement.Backend.Repository.ReviewRepository;

@ExtendWith(MockitoExtension.class)
class ReviewServiceTest {

    @Mock
    ReviewRepository reviewRepository;

    @InjectMocks
    ReviewServiceImpl reviewServiceImpl;

    @Test
    void userReviewListed_ShouldReturnTrueWhenReviewExists() {
        // Arrange
        String userEmail = "arsh@gmail.com";
        Long productId = 1L;
        when(reviewRepository.findByUserEmailAndProductId(userEmail, productId)).thenReturn(new Review());

        // Act
        boolean result = reviewServiceImpl.userReviewListed(userEmail, productId);

        // Assert
        assertTrue(result);
    }
}




_______________________________________________________________________________________

ProductServiceTest.java:
-------------------------------

package com.ArtGalleryManagement.Backend.Service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import com.ArtGalleryManagement.Backend.Entity.Checkout;
import com.ArtGalleryManagement.Backend.Entity.Product;
import com.ArtGalleryManagement.Backend.Repository.CheckoutRepository;
import com.ArtGalleryManagement.Backend.Repository.ProductRepository;

@ExtendWith(MockitoExtension.class)
class ProductServiceTest {
    @Mock
    ProductRepository productRepository;

    @Mock
    CheckoutRepository checkoutRepository;

    ProductServiceImpl productServiceImpl;

    @BeforeEach
    void setUp() {
        this.productServiceImpl = new ProductServiceImpl(productRepository, checkoutRepository, null, null);
    }

    @Test
    void currentLoansCountTest() {
        // Mocking the checkoutRepository behavior
        List<Checkout> checkoutList = new ArrayList<>();
        checkoutList.add(new Checkout());
        when(checkoutRepository.findProductsByUserEmail(any())).thenReturn(checkoutList);

        int loansCount = productServiceImpl.currentLoansCount("mohit@gmail.com");
        assertEquals(1, loansCount);
    }

    @Test
    void checkoutProductByUser() {
        // Mocking the checkoutRepository behavior
        Checkout checkout = new Checkout();
        when(checkoutRepository.findByUserEmailAndProductId(any(), any())).thenReturn(checkout);

        boolean result = productServiceImpl.checkoutProductByUser("mohit@gmail.com", 3L);
        assertTrue(result);
    }
}


//Dependencies :-

<dependency>
    <groupId>org.junit.jupiter</groupId>
    <artifactId>junit-jupiter-api</artifactId>
    <version>5.8.0</version>
    <scope>test</scope>
</dependency>

<dependency>
    <groupId>org.mockito</groupId>
    <artifactId>mockito-core</artifactId>
    <version>4.1.0</version>
    <scope>test</scope>
</dependency>
___________________________________________________________________________________

payment:

 package com.ArtGalleryManagement.Backend.Service;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.ArtGalleryManagement.Backend.Entity.Payment;
import com.ArtGalleryManagement.Backend.GlobalExceptionsHandler.NoPaymentInfoFoundException;
import com.ArtGalleryManagement.Backend.Repository.PaymentRepository;
import com.ArtGalleryManagement.Backend.RequestModels.PaymentInfoRequest;
import com.stripe.Stripe;
import com.stripe.exception.StripeException;
import com.stripe.model.PaymentIntent;
import com.stripe.param.PaymentIntentCreateParams;
import com.stripe.net.RequestOptions;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@ExtendWith(MockitoExtension.class)
class PaymentServiceTest {

    @Mock
    private PaymentRepository paymentRepository;

    @InjectMocks
    private PaymentServiceImpl paymentService;

    @BeforeEach
    void setUp() {
        Stripe.apiKey = "sk_test_51NA9sdSJVgLExqPUoc8lADLutsRszMnxvKBtLUUfAD1hinnQpWce3LoIyTxnryfB2cDox5UBVVfyMz9xyQReTvVl00ysAONpFI";
    }

    @Test
    void createPaymentIntentTest() throws StripeException {
        // Arrange
        PaymentInfoRequest paymentInfoRequest = new PaymentInfoRequest();
        paymentInfoRequest.setAmount(1000);
        paymentInfoRequest.setCurrency("USD");

        PaymentIntentCreateParams createParams = PaymentIntentCreateParams.builder()
                .setAmount(paymentInfoRequest.getAmount())
                .setCurrency(paymentInfoRequest.getCurrency())
                .addPaymentMethodType("card")
                .build();

        // Act
        PaymentIntent paymentIntent = PaymentIntent.create(createParams);

        // Assert
        assertNotNull(paymentIntent);
        assertNotNull(paymentIntent.getId());
    }

   @Test
void stripePaymentTest_paymentInfoFound() throws Exception {
    // Arrange
    String userEmail = "test@example.com";
    Payment paymentMock = mock(Payment.class);
    when(paymentRepository.findByUserEmail(userEmail)).thenReturn(paymentMock);

    // Mock the saving of payment and return the paymentMock
    when(paymentRepository.save(paymentMock)).thenReturn(paymentMock);

    // Act
    ResponseEntity<String> response = paymentService.stripePayment(userEmail);

    // Assert
    assertNotNull(response);
    assertEquals(HttpStatus.OK, response.getStatusCode());
    assertEquals("Payment done successfully", response.getBody());
    verify(paymentMock, times(1)).setAmount(0.0);
    verify(paymentRepository, times(1)).save(paymentMock);
}
 
    @Test
    void stripePaymentTest_paymentInfoNotFound() {
        // Arrange
        String userEmail = "test@example.com";
        when(paymentRepository.findByUserEmail(userEmail)).thenReturn(null);

        // Act and Assert
        assertThrows(NoPaymentInfoFoundException.class, () -> paymentService.stripePayment(userEmail));
    }
}
_________________________________________________________________________________________

3) MessageServiceImpl 

package com.ArtGalleryManagement.Backend.Service;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.ArtGalleryManagement.Backend.Entity.Message;
import com.ArtGalleryManagement.Backend.GlobalExceptionsHandler.NoMessageFoundException;
import com.ArtGalleryManagement.Backend.Repository.MessageRepository;
import com.ArtGalleryManagement.Backend.RequestModels.AdminQuestionRequest;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Optional;

@ExtendWith(MockitoExtension.class)
class MessageServiceTest {

    @Mock
    private MessageRepository messageRepository;

    @InjectMocks
    private MessageServiceImpl messageService;

    @BeforeEach
    void setUp() {
        // Set up any necessary initialization
    }

    @Test
    void postMessageTest() {
        // Arrange
        Message messageRequest = new Message();
        messageRequest.setTitle("Test Title");
        messageRequest.setQuestion("Test Question");
        String userEmail = "test@example.com";

        // Act
        messageService.postMessage(messageRequest, userEmail);

        // Assert
        verify(messageRepository, times(1)).save(any(Message.class));
    }

    @Test
    void putMessageTest_messageFound() throws Exception {
        // Arrange
        Long messageId = 1L;
        AdminQuestionRequest adminQuestionRequest = new AdminQuestionRequest();
        adminQuestionRequest.setMessageId(messageId);
        adminQuestionRequest.setResponse("Test Response");
        String userEmail = "admin@example.com";

        Message existingMessage = new Message();
        existingMessage.setId(messageId);

        when(messageRepository.findById(messageId)).thenReturn(Optional.of(existingMessage));

        // Act
        messageService.putMessage(adminQuestionRequest, userEmail);

        // Assert
        verify(messageRepository, times(1)).findById(messageId);
        verify(messageRepository, times(1)).save(existingMessage);
        assertEquals(userEmail, existingMessage.getAdminEmail());
        assertEquals(adminQuestionRequest.getResponse(), existingMessage.getResponse());
        assertTrue(existingMessage.isClosed());
    }

    @Test
    void putMessageTest_messageNotFound() {
        // Arrange
        Long messageId = 1L;
        AdminQuestionRequest adminQuestionRequest = new AdminQuestionRequest();
        adminQuestionRequest.setMessageId(messageId);
        adminQuestionRequest.setResponse("Test Response");
        String userEmail = "admin@example.com";

        when(messageRepository.findById(messageId)).thenReturn(Optional.empty());

        // Act and Assert
        assertThrows(NoMessageFoundException.class, () -> messageService.putMessage(adminQuestionRequest, userEmail));
        verify(messageRepository, times(1)).findById(messageId);
        verify(messageRepository, never()).save(any(Message.class));
    }
}
