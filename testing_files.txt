//dependencies:


<dependencies>
    <!-- JUnit 5 -->
    <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter-api</artifactId>
        <version>5.8.1</version>
        <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter-engine</artifactId>
        <version>5.8.1</version>
        <scope>test</scope>
    </dependency>

    <!-- Mockito -->
    <dependency>
        <groupId>org.mockito</groupId>
        <artifactId>mockito-core</artifactId>
        <version>3.12.4</version>
        <scope>test</scope>
    </dependency>
</dependencies>

________________________________________________________________

ReviewServiceTest.java
package com.ArtGalleryManagement.Backend.Service;

import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import com.ArtGalleryManagement.Backend.Repository.ReviewRepository;

@ExtendWith(MockitoExtension.class)
class ReviewServiceTest {

    @Mock
    ReviewRepository reviewRepository;

    @InjectMocks
    ReviewServiceImpl reviewServiceImpl;

    @Test
    void userReviewListed_ShouldReturnTrueWhenReviewExists() {
        // Arrange
        String userEmail = "arsh@gmail.com";
        Long productId = 1L;
        when(reviewRepository.findByUserEmailAndProductId(userEmail, productId)).thenReturn(new Review());

        // Act
        boolean result = reviewServiceImpl.userReviewListed(userEmail, productId);

        // Assert
        assertTrue(result);
    }
}




_______________________________________________________________________________________

ProductServiceTest.java:
-------------------------------

package com.ArtGalleryManagement.Backend.Service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import com.ArtGalleryManagement.Backend.Entity.Checkout;
import com.ArtGalleryManagement.Backend.Entity.Product;
import com.ArtGalleryManagement.Backend.Repository.CheckoutRepository;
import com.ArtGalleryManagement.Backend.Repository.ProductRepository;

@ExtendWith(MockitoExtension.class)
class ProductServiceTest {
    @Mock
    ProductRepository productRepository;

    @Mock
    CheckoutRepository checkoutRepository;

    ProductServiceImpl productServiceImpl;

    @BeforeEach
    void setUp() {
        this.productServiceImpl = new ProductServiceImpl(productRepository, checkoutRepository, null, null);
    }

    @Test
    void currentLoansCountTest() {
        // Mocking the checkoutRepository behavior
        List<Checkout> checkoutList = new ArrayList<>();
        checkoutList.add(new Checkout());
        when(checkoutRepository.findProductsByUserEmail(any())).thenReturn(checkoutList);

        int loansCount = productServiceImpl.currentLoansCount("mohit@gmail.com");
        assertEquals(1, loansCount);
    }

    @Test
    void checkoutProductByUser() {
        // Mocking the checkoutRepository behavior
        Checkout checkout = new Checkout();
        when(checkoutRepository.findByUserEmailAndProductId(any(), any())).thenReturn(checkout);

        boolean result = productServiceImpl.checkoutProductByUser("mohit@gmail.com", 3L);
        assertTrue(result);
    }
}


//Dependencies :-

<dependency>
    <groupId>org.junit.jupiter</groupId>
    <artifactId>junit-jupiter-api</artifactId>
    <version>5.8.0</version>
    <scope>test</scope>
</dependency>

<dependency>
    <groupId>org.mockito</groupId>
    <artifactId>mockito-core</artifactId>
    <version>4.1.0</version>
    <scope>test</scope>
</dependency>
